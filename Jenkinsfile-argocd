// Jenkinsfile for deploying ArgoCD on EKS using Terraform
pipeline {
    agent any // Consider using a Docker agent with pre-installed tools for consistency:
              // agent { docker { image 'hashicorp/terraform:latest' } }
              // You'd also need kubectl and aws-cli in that image.

    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['plan', 'apply', 'destroy'], description: 'Choose the Terraform action (plan, apply, or destroy) for ArgoCD.')
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/awssrini/eks-github-actions.git' // Replace with your actual repo URL
                sh 'ls -la'
                sh 'ls -la argocd-tf || echo "argocd-tf directory not found!"'
            }
        }

        stage('Configure AWS & Kubeconfig') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'ap-southeast-1') { // Use your Jenkins AWS credentials ID
                    script {
                        // Configure kubectl to connect to the EKS cluster
                        // This command requires aws-cli and kubectl to be installed on the agent
                        // Replace 'dev-medium-eks-cluster' with your actual EKS cluster name
                        sh "aws eks update-kubeconfig --name dev-medium-eks-cluster --region ap-southeast-1"
                        sh "kubectl config current-context" // Verify kubectl context
                        sh "kubectl cluster-info" // Verify cluster connectivity
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'ap-southeast-1') {
                    // Navigate to the directory containing argocd.tf
                    sh 'terraform -chdir=argocd-tf/ init'
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'ap-southeast-1') {
                    sh 'terraform -chdir=argocd-tf/ validate'
                }
            }
        }

        stage('Terraform Action') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'ap-southeast-1') {
                    script {
                        def terraformCommand = "terraform -chdir=argocd-tf/"

                        if (params.TERRAFORM_ACTION == 'plan') {
                            sh "${terraformCommand} plan"
                        } else if (params.TERRAFORM_ACTION == 'apply') {
                            // -auto-approve is used for automation. Be extremely careful with 'apply' in production.
                            input message: "Proceed with Terraform apply to install ArgoCD?", ok: "Yes, apply changes"
                            sh "${terraformCommand} apply -auto-approve"
                        } else if (params.TERRAFORM_ACTION == 'destroy') {
                            // -auto-approve is used for automation. Be extremely careful with 'destroy' in production.
                            input message: "Are you sure you want to DESTROY ArgoCD infrastructure?", ok: "Yes, destroy it"
                            sh "${terraformCommand} destroy -auto-approve"
                        } else {
                            error "Invalid Terraform action: ${params.TERRAFORM_ACTION}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished with status: ${currentBuild.currentResult}"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
        success {
            echo "ArgoCD deployment pipeline completed successfully."
            // Optionally, output the ArgoCD URL and password instructions here again
            // This requires parsing Terraform output, which can be done with 'terraform output -raw <output_name>'
        }
    }
}